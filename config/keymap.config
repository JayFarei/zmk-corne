#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3

/ {
    macros {
        macro0: macro0 { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LGUI &kp LCTRL &kp G &kp LCTRL &kp LGUI>; };
        macro1: macro1 { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LSHFT &kp TAB>; };
        macro2: macro2 { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LGUI &kp LBKT &kp LGUI>; };
        macro3: macro3 { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LGUI &kp RBKT &kp LGUI>; };
        macro6: macro6 { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LCTRL &kp N1>; };
        macro7: macro7 { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LCTRL &kp N2>; };
        macro8: macro8 { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LCTRL &kp N3>; };
        macro9: macro9 { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LCTRL &kp N4>; };
        macro10: macro10 { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LCTRL &kp N5>; };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T         &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
                &kp LCTRL &hm LGUI A &hm LALT S &hm LSHFT D &hm LCTRL F &kp G    &kp H  &hm RCTRL J &hm RSHFT K &hm LALT L &hm RGUI SEMI &kp SQT
                &kp LSHFT  &kp Z     &kp X     &kp C     &kp V     &kp B         &kp N     &kp M    &kp COMMA  &kp DOT   &kp FSLH  &macro0
                                                  &kp LGUI  &mo LOWER &kp SPACE     &kp RET &lt RAISE SPACE &kp RALT
            >;
        };

        lower_layer {
            bindings = <
                &macro1    &kp N1    &kp N2    &kp N3    &kp N4    &kp N5        &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &macro3  
                &kp LALT   &macro6   &macro7   &macro8   &macro9   &macro10      &none     &kp LEFT  &kp UP    &kp DOWN  &kp RIGHT &macro2  
                &kp LSHFT  &none    &out OUT_TOG &none   &none     &none         &kp C_MUTE &kp C_VOL_UP &kp C_VOL_DN &kp C_NEXT &kp C_PREV &kp C_PP
                                                 &to ADJUST &trans    &kp SPACE     &kp RET   &kp BSPC  &kp RALT
            >;
        };

        raise_layer {
            bindings = <
                &none     &kp LS(N1) &kp LS(N2) &kp HASH &kp LS(N4) &kp LS(N5)   &kp LS(N6) &kp LS(N7) &kp LS(N8) &kp LS(N9) &kp LS(N0) &kp DEL 
                &kp LCTRL &kp F1    &kp F2     &kp F3    &kp F4    &kp F5        &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT  &kp BSLH  &kp GRAVE
                &kp LSHFT &kp F6    &kp F7     &kp F8    &kp F9    &kp F10       &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC  &kp PIPE  &kp TILDE
                                                 &kp LGUI   &macro6   &kp SPACE     &kp RET   &trans    &kp RALT
            >;
        };

        adjust_layer {
            bindings = <
                &kp LALT  &kp C_PREV &kp C_PP  &kp C_NEXT &none    &kp DEL       &none     &none     &none     &none     &none     &none    
                &kp LSHFT &kp N1    &kp N2     &kp N3    &kp N4    &kp N5        &none     &none     &none     &none     &none     &none    
                &kp LCTRL &kp N6    &kp N7     &kp N8    &kp N9    &kp N0        &none     &none     &none     &none     &none     &none    
                                                 &kp ESC   &kp SPACE &to DEFAULT    &none     &none     &none
            >;
        };
    };
};
